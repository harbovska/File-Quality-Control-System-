import streamlit as st
import pandas as pd
from PIL import Image, ImageEnhance, ImageFilter
import io
import base64
from datetime import datetime
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –ö–æ–Ω—Ç—Ä–æ–ª—é –Ø–∫–æ—Å—Ç—ñ –§–∞–π–ª—ñ–≤",
    page_icon="üñ®Ô∏è",
    layout="wide"
)

# CSS —Å—Ç–∏–ª—ñ
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .feature-box {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 8px;
        border-left: 4px solid #2a5298;
        margin: 1rem 0;
    }
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .error-box {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
    .warning-box {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        color: #856404;
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div class="main-header">
        <h1>üñ®Ô∏è –°–∏—Å—Ç–µ–º–∞ –ö–æ–Ω—Ç—Ä–æ–ª—é –Ø–∫–æ—Å—Ç—ñ –§–∞–π–ª—ñ–≤</h1>
        <h3>–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –¥—Ä—É–∫–∞—Ä—Å—å–∫–æ—ó —ñ–Ω–¥—É—Å—Ç—Ä—ñ—ó</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–æ—Ç–æ–¥—Ä—É–∫
    st.markdown("""
    <div class="feature-box">
        <h2>üì∏ –ü—Ä–æ –§–æ—Ç–æ–¥—Ä—É–∫ —Ç–∞ –Ø–∫—ñ—Å—Ç—å –§–∞–π–ª—ñ–≤</h2>
        <p><strong>–§–æ—Ç–æ–¥—Ä—É–∫</strong> - —Ü–µ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—ñ–∑–∏—á–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ —Ü–∏—Ñ—Ä–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤. –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤–æ –¥–æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –≤–∏–º–æ–≥:</p>
        
        <h4>üéØ –û—Å–Ω–æ–≤–Ω—ñ –≤–∏–º–æ–≥–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤:</h4>
        <ul>
            <li><strong>–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É:</strong> JPEG - –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–æ—Ç–æ–¥—Ä—É–∫—É</li>
            <li><strong>–†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å:</strong> –ú—ñ–Ω—ñ–º—É–º 300 DPI –¥–ª—è —è–∫—ñ—Å–Ω–æ–≥–æ –¥—Ä—É–∫—É</li>
            <li><strong>–ö–æ–ª—ñ—Ä–Ω–∞ –º–æ–¥–µ–ª—å:</strong> RGB - —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å</li>
        </ul>
        
        <h4>‚ö° –ü–µ—Ä–µ–≤–∞–≥–∏ –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏:</h4>
        <ul>
            <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤</li>
            <li>–®–Ü-–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ –Ω–µ–¥–æ–ª—ñ–∫—ñ–≤</li>
            <li>–î–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –ø—Ä–æ —è–∫—ñ—Å—Ç—å</li>
            <li>–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
    st.markdown("## üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –§–∞–π–ª—ñ–≤")
    uploaded_files = st.file_uploader(
        "–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏",
        type=['jpg', 'jpeg', 'png', 'bmp', 'tiff'],
        accept_multiple_files=True,
        help="–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: JPG, JPEG, PNG, BMP, TIFF"
    )
    
    if uploaded_files:
        st.success(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª(—ñ–≤)")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        if st.button("üîç –ü–ï–†–ï–í–Ü–†–ò–¢–ò –§–ê–ô–õ–ò", type="primary", use_container_width=True):
            results = []
            
            # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, uploaded_file in enumerate(uploaded_files):
                status_text.text(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—É: {uploaded_file.name}")
                progress_bar.progress((i + 1) / len(uploaded_files))
                
                # –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—É
                result = analyze_file(uploaded_file)
                results.append(result)
            
            status_text.text("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            display_results(results, uploaded_files)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
            generate_report(results)

def analyze_file(uploaded_file):
    """–ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—É –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –≤–∏–º–æ–≥–∞–º"""
    try:
        # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image = Image.open(uploaded_file)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
        format_check = uploaded_file.type == "image/jpeg"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DPI
        dpi = image.info.get('dpi', (72, 72))
        if isinstance(dpi, tuple):
            dpi_value = min(dpi)
        else:
            dpi_value = dpi
        dpi_check = dpi_value >= 300
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ—Ä–Ω–æ—ó –º–æ–¥–µ–ª—ñ
        color_mode = image.mode
        rgb_check = color_mode in ['RGB', 'RGBA']
        
        # –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
        file_size = len(uploaded_file.getvalue())
        
        # –†–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        width, height = image.size
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
        issues = []
        if not format_check:
            issues.append("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É")
        if not dpi_check:
            issues.append(f"–ù–∏–∑—å–∫–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å ({dpi_value} DPI)")
        if not rgb_check:
            issues.append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ–ª—ñ—Ä–Ω–∞ –º–æ–¥–µ–ª—å ({color_mode})")
        
        overall_quality = "–í—ñ–¥–º—ñ–Ω–Ω–æ" if not issues else "–ü–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è"
        
        return {
            'filename': uploaded_file.name,
            'format_check': format_check,
            'dpi_check': dpi_check,
            'dpi_value': dpi_value,
            'rgb_check': rgb_check,
            'color_mode': color_mode,
            'file_size': file_size,
            'width': width,
            'height': height,
            'issues': issues,
            'overall_quality': overall_quality,
            'image': image
        }
    except Exception as e:
        return {
            'filename': uploaded_file.name,
            'error': str(e),
            'overall_quality': '–ü–æ–º–∏–ª–∫–∞'
        }

def display_results(results, uploaded_files):
    """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"""
    st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏")
    
    for i, result in enumerate(results):
        with st.expander(f"üìÑ {result['filename']}", expanded=True):
            if 'error' in result:
                st.markdown(f"""
                <div class="error-box">
                    <strong>‚ùå –ü–æ–º–∏–ª–∫–∞:</strong> {result['error']}
                </div>
                """, unsafe_allow_html=True)
                continue
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                st.markdown("### üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ê–Ω–∞–ª—ñ–∑—É")
                
                # –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É
                format_status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" if result['format_check'] else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ"
                st.markdown(f"**–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É (JPEG):** {format_status}")
                
                # DPI
                dpi_status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" if result['dpi_check'] else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ"
                st.markdown(f"**–†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å (‚â•300 DPI):** {dpi_status} ({result['dpi_value']} DPI)")
                
                # RGB
                rgb_status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ" if result['rgb_check'] else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ"
                st.markdown(f"**–ö–æ–ª—ñ—Ä–Ω–∞ –º–æ–¥–µ–ª—å (RGB):** {rgb_status} ({result['color_mode']})")
                
                # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                st.markdown("### üìè –¢–µ—Ö–Ω—ñ—á–Ω—ñ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
                st.markdown(f"**–†–æ–∑–º—ñ—Ä–∏:** {result['width']} x {result['height']} –ø—ñ–∫—Å–µ–ª—ñ–≤")
                st.markdown(f"**–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É:** {result['file_size'] / 1024:.1f} KB")
                
                # –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
                if result['overall_quality'] == "–í—ñ–¥–º—ñ–Ω–Ω–æ":
                    st.markdown("""
                    <div class="success-box">
                        <strong>‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: –í—ñ–¥–º—ñ–Ω–Ω–æ</strong><br>
                        –§–∞–π–ª –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤—Å—ñ–º –≤–∏–º–æ–≥–∞–º –¥–ª—è —è–∫—ñ—Å–Ω–æ–≥–æ –¥—Ä—É–∫—É.
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    issues_text = "<br>‚Ä¢ ".join(result['issues'])
                    st.markdown(f"""
                    <div class="warning-box">
                        <strong>‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞: –ü–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è</strong><br>
                        –í–∏—è–≤–ª–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:<br>‚Ä¢ {issues_text}
                    </div>
                    """, unsafe_allow_html=True)
            
            with col2:
                # –ü—Ä–µ–≤—å—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                st.markdown("### üñºÔ∏è –ü—Ä–µ–≤—å—é")
                st.image(result['image'], use_container_width=True)
                
                # –®–Ü –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
                if result['issues']:
                    st.markdown("### ü§ñ –®–Ü –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
                    if st.button(f"–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —Ñ–∞–π–ª", key=f"improve_{i}"):
                        improved_image = improve_image_ai(result['image'], result['issues'])
                        st.success("‚úÖ –§–∞–π–ª –ø–æ–∫—Ä–∞—â–µ–Ω–æ!")
                        
                        # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                        st.markdown("**–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ñ–∞–π–ª:**")
                        st.image(improved_image, use_container_width=True)
                        
                        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                        img_buffer = io.BytesIO()
                        improved_image.save(img_buffer, format='JPEG', quality=95, dpi=(300, 300))
                        img_buffer.seek(0)
                        
                        st.download_button(
                            label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ñ–∞–π–ª",
                            data=img_buffer.getvalue(),
                            file_name=f"improved_{result['filename']}",
                            mime="image/jpeg"
                        )

def improve_image_ai(image, issues):
    """–°–∏–º—É–ª—è—Ü—ñ—è –®–Ü –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    improved = image.copy()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ RGB —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if improved.mode != 'RGB':
        improved = improved.convert('RGB')
    
    # –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ
    if any("—Ä–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å" in issue.lower() for issue in issues):
        # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ
        width, height = improved.size
        new_width = int(width * 1.5)
        new_height = int(height * 1.5)
        improved = improved.resize((new_width, new_height), Image.Resampling.LANCZOS)
    
    # –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ —Ç–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
    enhancer = ImageEnhance.Color(improved)
    improved = enhancer.enhance(1.1)
    
    enhancer = ImageEnhance.Contrast(improved)
    improved = enhancer.enhance(1.05)
    
    enhancer = ImageEnhance.Sharpness(improved)
    improved = enhancer.enhance(1.1)
    
    return improved

def generate_report(results):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É –≤ Excel"""
    st.markdown("## üìã –ó–≤—ñ—Ç –ø—Ä–æ –ü–µ—Ä–µ–≤—ñ—Ä–∫—É")
    
    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—É
    report_data = []
    for result in results:
        if 'error' not in result:
            report_data.append({
                '–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É': result['filename'],
                '–§–æ—Ä–º–∞—Ç JPEG': '–¢–∞–∫' if result['format_check'] else '–ù—ñ',
                'DPI': result['dpi_value'],
                'DPI ‚â•300': '–¢–∞–∫' if result['dpi_check'] else '–ù—ñ',
                '–ö–æ–ª—ñ—Ä–Ω–∞ –º–æ–¥–µ–ª—å': result['color_mode'],
                'RGB': '–¢–∞–∫' if result['rgb_check'] else '–ù—ñ',
                '–®–∏—Ä–∏–Ω–∞ (px)': result['width'],
                '–í–∏—Å–æ—Ç–∞ (px)': result['height'],
                '–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (KB)': round(result['file_size'] / 1024, 1),
                '–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞': result['overall_quality'],
                '–ü—Ä–æ–±–ª–µ–º–∏': '; '.join(result['issues']) if result['issues'] else '–ù–µ–º–∞—î'
            })
    
    if report_data:
        df = pd.DataFrame(report_data)
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        st.dataframe(df, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_files = len(report_data)
            st.metric("üìÅ –í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤", total_files)
        
        with col2:
            passed_files = len([r for r in results if r.get('overall_quality') == '–í—ñ–¥–º—ñ–Ω–Ω–æ'])
            st.metric("‚úÖ –ü—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É", passed_files)
        
        with col3:
            failed_files = total_files - passed_files
            st.metric("‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è", failed_files)
        
        with col4:
            success_rate = (passed_files / total_files * 100) if total_files > 0 else 0
            st.metric("üìä –í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É", f"{success_rate:.1f}%")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel –∑–≤—ñ—Ç—É
        excel_buffer = io.BytesIO()
        with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–ó–≤—ñ—Ç –ø—Ä–æ —è–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤', index=False)
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_df = pd.DataFrame({
                '–ü–æ–∫–∞–∑–Ω–∏–∫': ['–í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤', '–ü—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É', '–ü–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è', '–í—ñ–¥—Å–æ—Ç–æ–∫ —É—Å–ø—ñ—Ö—É'],
                '–ó–Ω–∞—á–µ–Ω–Ω—è': [total_files, passed_files, failed_files, f"{success_rate:.1f}%"]
            })
            stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        excel_buffer.seek(0)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        st.download_button(
            label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç Excel",
            data=excel_buffer.getvalue(),
            file_name=f"–∑–≤—ñ—Ç_—è–∫–æ—Å—Ç—ñ_—Ñ–∞–π–ª—ñ–≤_{timestamp}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            type="primary",
            use_container_width=True
        )

if __name__ == "__main__":
    main()
